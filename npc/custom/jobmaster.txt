//============================================================
//= rAthenaCN [转职大师]汉化脚本 
//============================================================


//===== rAthena Script =======================================
//= Job Master
//===== By: ==================================================
//= Euphy
//===== Current Version: =====================================
//= 1.4
//===== Compatible With: ===================================== 
//= rAthena Project
//===== Description: =========================================
//= A fully functional job changer.
//===== Additional Comments: =================================
//= 1.0 Initial script.
//= 1.1 Fixed reset on Baby job change.
//= 1.2 Added Expanded Super Novice support and initial Kagerou/Oboro support.
//= 1.3 Kagerou/Oboro added.
//= 1.4 Rebellion added.
//============================================================

prontera,153,193,6	script	转职大师	123,{
function Job_Menu;

	mes "[转职大师]";
	if (Class > Job_Soul_Linker) {
		mes "没有更多的职业可供选择.";
		close;
	}
	if (checkfalcon() || checkcart() || checkriding() || ismounting()) {
		mes "请先移除您的 " +
			((checkfalcon()) ? "猎鹰" : "") +
			((checkcart()) ? "手推车" : "") +
			((checkriding()) ? "大嘴鸟" : "") +
			((ismounting()) ? "坐骑" : "") +
			" 然后继续转职.";
		close;
	}
	if (.SkillPointCheck && SkillPoint) {
		mes "请使用完所有的技能点数才能继续转职.";
		close;
	}

	.@eac = eaclass();
	.@i = ((.ThirdClass) ? roclass(.@eac&EAJ_UPPERMASK) : Class);
	if (.@i >= Job_Knight && .@i <= Job_Crusader2) {
		if (BaseLevel < .Rebirth[0] || JobLevel < .Rebirth[1]) {
			.@blvl = .Rebirth[0] - BaseLevel;
			.@jlvl = .Rebirth[1] - JobLevel;
			mes "您的 " +
				((.@blvl > 0) ? ("基本等级还差 " + .@blvl + " 级需要提升") + ((.@jlvl > 0) ? "/ " : "") : "") + 
				((.@jlvl > 0) ? ("职业等级还差 " + .@jlvl + " 级需要提升") : "") + "才能继续转职.";
			close;
		}
		if (Class > Job_Crusader2) {
			mes "转职成三转职业?";
			next;
			Job_Menu(roclass(.@eac|EAJL_THIRD));
			close;
		}
		while(1) {
			mes "请选择一项.";
			next;
			.@i = select(" ~ ^0055FF转生^000000:" + ((.ThirdClass) ? roclass(.@eac|EAJL_UPPER)==-1 ? " ~ ^FF0000三转职业^000000" : "" : "") + ": ~ ^777777取消^000000");
			if (.@i == 3)
				close;
			mes "[转职大师]";
			mes "您确定了吗?";
			next;
			Job_Menu(((.@i == 1) ? Job_Novice_High : roclass(.@eac|EAJL_THIRD)));
			mes "[转职大师]";
		}
	}
	.@j1 = roclass(.@eac|EAJL_2_1);
	.@j2 = roclass(.@eac|EAJL_2_2);
	if ((.@eac&EAJ_UPPERMASK) == EAJ_SUPER_NOVICE)
		setarray .@exp[0], roclass(.@eac|EAJL_THIRD), 99;
	if (Class == Job_Ninja || Class == Job_Gunslinger)
		setarray .@exp[0], .@j1, 70;
	if (.@exp[0] && .SecondExpanded) {
		if (BaseLevel < .Rebirth[0] || JobLevel < .@exp[1]) {
			.@blvl = .Rebirth[0] - BaseLevel;
			.@jlvl = .@exp[1] - JobLevel;
			mes "您的 " + 
				((.@blvl > 0) ? ("基本等级还差 " + .@blvl + " 级需要提升") + ((.@jlvl > 0) ? "/ " : "") : "") +
				((.@jlvl > 0) ? ("职业等级还差 " + .@jlvl + " 级需要提升") : "") + "才能继续.";
			close;
		}
		mes "转职为 " + jobname(.@exp[0]) + "?";
		next;
		Job_Menu(.@exp[0]);
		close;
	}
	if (.@eac&EAJL_2)
		if (.@eac&(EAJL_UPPER|EAJL_BABY) || roclass(.@eac|EAJL_UPPER) == -1) {
			mes "没有更多的职业可供选择.";
			close;
		}
	if ((.@eac&EAJ_BASEMASK) == EAJ_NOVICE) {
		if (JobLevel < .JobReq[0])
			mes "您的职业等级需要提高到 " + .JobReq[0] + " 级,才能转职为一转职业.";
		else if (Class == Job_Novice_High && .LastJob && lastJob) {
			mes "请选择要转职的职业.";
			next;
			Job_Menu(roclass((eaclass(lastJob)&EAJ_BASEMASK)|EAJL_UPPER));
		} else {
			switch(Class) {
			case Job_Novice:
				Job_Menu(
					Job_Swordman,
					Job_Mage,
					Job_Archer,
					Job_Acolyte,
					Job_Merchant,
					Job_Thief,
					Job_SuperNovice,
					Job_Taekwon,
					Job_Gunslinger,
					Job_Ninja,
					Job_Baby
				);
				break;
			case Job_Novice_High:
				Job_Menu(
					Job_Swordman_High,
					Job_Mage_High,
					Job_Archer_High,
					Job_Acolyte_High,
					Job_Merchant_High,
					Job_Thief_High
				);
				break;
			case Job_Baby:
				Job_Menu(
					Job_Baby_Swordman,
					Job_Baby_Mage,
					Job_Baby_Archer,
					Job_Baby_Acolyte,
					Job_Baby_Merchant,
					Job_Baby_Thief,
					Job_Super_Baby
				);
				break;
			default:
				mes "发生了错误.";
				break;
			}
		}
		close;
	}
	if (roclass(.@eac|EAJL_2_1) == -1 || roclass(.@eac|EAJL_2_2) == -1)
		mes "没有更多的职业可供选择.";
	else if (!(.@eac&EAJL_2) && JobLevel < .JobReq[1])
		mes "您的职业等级需要提高到 " + .JobReq[1] + " 级,才能转职为二转职业.";
	else if (.LastJob && lastJob && (.@eac&EAJL_UPPER)) {
		mes "您确定了吗?";
		next;
		Job_Menu(lastJob + Job_Novice_High);
	} else
		Job_Menu(.@j1, .@j2);
	close;

function Job_Menu {
	while(1) {
		if (getargcount() > 1) {
			mes "请选择要转职的职业.";
			.@menu$ = "";
			for (.@i = 0; .@i < getargcount(); .@i++)
				.@menu$ = .@menu$ + " ~ " + jobname(getarg(.@i)) + ":";
			.@menu$ = .@menu$+" ~ ^777777取消^000000";
			next;
			.@i = getarg(select(.@menu$) - 1, 0);
			if (!.@i)
				close;
			if ((.@i == Job_SuperNovice || .@i == Job_Super_Baby) && BaseLevel < .SNovice) {
				mes "[转职大师]";
				mes "需要基本等级达到 " + .SNovice + " 级才能转职为 " + jobname(.@i) + ".";
				close;
			}
			mes "[转职大师]";
			mes "您确定了吗?";
			next;
		} else
			.@i = getarg(0);
		if (select(" ~ 转职为 ^0055FF" + jobname(.@i) + "^000000 职业: ~ ^777777" + ((getargcount() > 1) ? "返回" : "取消") + "^000000") == 1) {
			mes "[转职大师]";
			mes "您现在是一名 " + jobname(.@i) + " 了!";
			if (.@i == Job_Novice_High && .LastJob)
				lastJob = Class;
			jobchange .@i;
			if (.@i == Job_Novice_High)
				resetlvl(1);
			else if (.@i == Job_Baby) {
				resetstatus;
				resetskill;
				set SkillPoint,0;
			}
			specialeffect2 EF_ANGEL2;
			specialeffect2 EF_ELECTRIC;
			if (.Platinum)
				callsub Get_Platinum;
			callsub Get_3rdJobItem;
			close;
			
		}
		if (getargcount() == 1)
			return;
		mes "[转职大师]";
	}
	end;
}

Get_3rdJobItem:
	switch (Class) {
		case 4054:	getitem 5746,1;	break;	//卢恩骑士
		case 4060:	getitem 5746,1;	break;
		
		case 4055:	getitem 5753,1;	break;	//大法师
		case 4061:	getitem 5753,1;	break;
		
		case 4056:	getitem 5748,1;	break;	//游侠
		case 4062:	getitem 5748,1;	break;
		
		case 4057:	getitem 5747,1;	break;	//大主教
		case 4063:	getitem 5747,1;	break;
		
		case 4058:	getitem 5749,1;	getitem 5760,1; break;	//机匠
		case 4064:	getitem 5749,1; getitem 5760,1;	break;
		
		case 4059:	getitem 5755,1;	break;	//十字切割
		case 4065:	getitem 5755,1;	break;
		
		case 4066:	getitem 5757,1;	break;	//皇家卫士
		case 4073:	getitem 5757,1;	break;
		
		case 4067:	getitem 5756,1;	break;	//元素
		case 4074:	getitem 5756,1;	break;
		
		case 4068:	getitem 5751,1;	break;	//宫廷
		case 4075:	getitem 5751,1;	break;
		
		case 4069:	getitem 5758,1;	break;	//漫游
		case 4076:	getitem 5758,1;	break;
		
		case 4070:	getitem 5754,1;	break;	//修罗
		case 4077:	getitem 5754,1;	break;
		
		case 4071:	getitem 5752,1;	break;	//基因
		case 4078:	getitem 5752,1;	break;
		
		case 4072:	getitem 5750,1;	break;	//逐影
		case 4079:	getitem 5750,1;	break;
	}
return;

Get_Platinum:
	skill "NV_FIRSTAID",1,SKILL_PERM;
	switch (BaseClass) {
	case Job_Novice:
		if (Class != Job_SuperNovice)
			skill "NV_TRICKDEAD",1,SKILL_PERM;
		break;
	case Job_Swordman:
		skill "SM_MOVINGRECOVERY",1,SKILL_PERM;
		skill "SM_FATALBLOW",1,SKILL_PERM;
		skill "SM_AUTOBERSERK",1,SKILL_PERM;
		break;
	case Job_Mage:
		skill "MG_ENERGYCOAT",1,SKILL_PERM;
		break;
	case Job_Archer:
		skill "AC_MAKINGARROW",1,SKILL_PERM;
		skill "AC_CHARGEARROW",1,SKILL_PERM;
		break;
	case Job_Acolyte:
		skill "AL_HOLYLIGHT",1,SKILL_PERM;
		break;
	case Job_Merchant:
		skill "MC_CARTREVOLUTION",1,SKILL_PERM;
		skill "MC_CHANGECART",1,SKILL_PERM;
		skill "MC_LOUD",1,SKILL_PERM;
		break;
	case Job_Thief:
		skill "TF_SPRINKLESAND",1,SKILL_PERM;
		skill "TF_BACKSLIDING",1,SKILL_PERM;
		skill "TF_PICKSTONE",1,SKILL_PERM;
		skill "TF_THROWSTONE",1,SKILL_PERM;
		break;
	default:
		break;
	}
	switch (BaseJob) {
	case Job_Knight:
		skill "KN_CHARGEATK",1,SKILL_PERM;
		break;
	case Job_Priest:
		skill "PR_REDEMPTIO",1,SKILL_PERM;
		break;
	case Job_Wizard:
		skill "WZ_SIGHTBLASTER",1,SKILL_PERM;
		break;
	case Job_Blacksmith:
		skill "BS_UNFAIRLYTRICK",1,SKILL_PERM;
		skill "BS_GREED",1,SKILL_PERM;
		break;
	case Job_Hunter:
		skill "HT_PHANTASMIC",1,SKILL_PERM;
		break;
	case Job_Assassin:
		skill "AS_SONICACCEL",1,SKILL_PERM;
		skill "AS_VENOMKNIFE",1,SKILL_PERM;
		break;
	case Job_Crusader:
		skill "CR_SHRINK",1,SKILL_PERM;
		break;
	case Job_Monk:
		skill "MO_KITRANSLATION",1,SKILL_PERM;
		skill "MO_BALKYOUNG",1,SKILL_PERM;
		break;
	case Job_Sage:
		skill "SA_CREATECON",1,SKILL_PERM;
		skill "SA_ELEMENTWATER",1,SKILL_PERM;
		skill "SA_ELEMENTGROUND",1,SKILL_PERM;
		skill "SA_ELEMENTFIRE",1,SKILL_PERM;
		skill "SA_ELEMENTWIND",1,SKILL_PERM;
		break;
	case Job_Rogue:
		skill "RG_CLOSECONFINE",1,SKILL_PERM;
		break;
	case Job_Alchemist:
		skill "AM_BIOETHICS",1,SKILL_PERM;
		break;
	case Job_Bard:
		skill "BA_PANGVOICE",1,SKILL_PERM;
		break;
	case Job_Dancer:
		skill "DC_WINKCHARM",1,SKILL_PERM;
		break;
	default:
		break;
	}
	return;

OnInit:
	setarray .Rebirth[0],99,50;	// Minimum base level, job level to rebirth OR change to third class
	setarray .JobReq[0],10,40;	// Minimum job level to turn into 1st class, 2nd class
	.ThirdClass = 1;			// Enable third classes? (1: yes / 0: no)
	.SecondExpanded = 1;		// Enable new expanded second classes: Ex. Super Novice, Kagerou/Oboro, Rebellion? (1: yes / 0: no)
	.SNovice = 45;				// Minimum base level to turn into Super Novice
	.LastJob = 1;				// Enforce linear class changes? (1: yes / 0: no)
	.SkillPointCheck = 1;		// Force player to use up all skill points? (1: yes / 0: no)
	.Platinum = 1;				// Get platinum skills automatically? (1: yes / 0: no)
	end;
}
